import {Dto, PostConstruct} from "Dto";
##root: rest.GenericClass
#*
outputs a list of generics if present
 *#
#macro(theGenerics $clazz)
#if(${clazz.clazz.childTypes} && ${clazz.clazz.childTypes.size()} > 0)
<#foreach($generic in ${clazz.clazz.childTypes})
${generic.toTypeScript()}#if($velocityCount < ${clazz.clazz.childTypes.size()}), #end
#end
>#end
#end
#*
ouztputs the list of class properties
*#
#macro(props $clazz)
#foreach($prop in $clazz.properties)
    ${prop.name}: ${prop.classType.toTypeScript()};
#end
#end
#*
 Defines the class definition header (export class ClassName)
 *#
#macro(classHeader $clazz $implString)
export class ${clazz.name}${implString}#theGenerics($clazz)#if(${clazz.parentClass} )
 extends ${clazz.parentClass.name}${implString}#theGenerics($clazz)
#end
 implements I${clazz.name}#theGenerics($clazz)
#end

/**
 * DTO typescript interface definition for ${clazz.name}
 * this is just for instanceof checks since we cannot inherit
 * between api and impl, and api might rely on foreign base classes
 * So the API is a no go as well.
 *
 * The pattern is if a class inherits this interface, you can
 * savely cast the impl class against the api class although
 * they share only this interface.
 *
 * @ref: ${clazz.clazz.ownerType}
 */
export interface I${clazz.name}#theGenerics($clazz) {
}

/**
 * DTO typescript definition for ${clazz.name}
 *
 */
#classHeader($clazz '') {

#props($clazz)

}

/**
 * Implementation class for for ${clazz.name}
 */
@Dto({/* enable what you want to have mapped

#props($clazz)

*/})
#classHeader($clazz 'Impl') {

#props($clazz)

    constructor(data: ${clazz.name}#theGenerics($clazz)) {
#if(${clazz.parentClass})
        super(data);
#end
    }

    @PostConstruct()
    postConstruct(data: ${clazz.name}#theGenerics($clazz)) {
        //fill in your post init code here, the data is
        //already applied to this, but you can
        //alter it on the fly
    }

    //you can add custom behavior here
}